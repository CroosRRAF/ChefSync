# Generated by Django 5.2.5 on 2025-09-21 11:42

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('phone_no', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),
                ('address', models.TextField(blank=True, help_text='Full address of the user', null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Customer', 'Customer'), ('Cook', 'Cook'), ('DeliveryAgent', 'DeliveryAgent')], default='Customer', help_text='User role in the system', max_length=20)),
                ('profile_image', models.BinaryField(blank=True, null=True)),
                ('password', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('email_verification_expires', models.DateTimeField(blank=True, null=True)),
                ('approval_status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='approved', help_text='Approval status for cooks and delivery agents', max_length=20)),
                ('approval_notes', models.TextField(blank=True, help_text='Admin notes for approval/rejection', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the user was approved', null=True)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('last_failed_login', models.DateTimeField(blank=True, null=True)),
                ('account_locked', models.BooleanField(default=False)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin who approved this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='EmailOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('otp', models.CharField(max_length=6)),
                ('purpose', models.CharField(choices=[('registration', 'Registration'), ('password_reset', 'Password Reset'), ('email_verification', 'Email Verification')], default='registration', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('attempts', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'email_otp',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cook',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('specialty', models.CharField(blank=True, max_length=100, null=True)),
                ('kitchen_location', models.CharField(blank=True, max_length=255, null=True)),
                ('experience_years', models.IntegerField(blank=True, null=True)),
                ('rating_avg', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('availability_hours', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'Cook',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Customer',
            },
        ),
        migrations.CreateModel(
            name='DeliveryAgent',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('vehicle_type', models.CharField(blank=True, max_length=50, null=True)),
                ('license_no', models.CharField(blank=True, max_length=100, null=True)),
                ('vehicle_number', models.CharField(blank=True, max_length=20, null=True)),
                ('current_location', models.CharField(blank=True, max_length=255, null=True)),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'DeliveryAgent',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('admin_id', models.AutoField(primary_key=True, serialize=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Admin',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Document type name (e.g., 'Driving License', 'Food Safety Certificate')", max_length=100)),
                ('category', models.CharField(choices=[('cook', 'Cook Documents'), ('delivery_agent', 'Delivery Agent Documents')], help_text='Category this document belongs to', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of what this document is for', null=True)),
                ('is_required', models.BooleanField(default=True, help_text='Whether this document is required for approval')),
                ('allowed_file_types', models.JSONField(default=list, help_text="List of allowed file extensions (e.g., ['pdf', 'jpg', 'png'])")),
                ('max_file_size_mb', models.IntegerField(default=5, help_text='Maximum file size in MB')),
                ('is_single_page_only', models.BooleanField(default=True, help_text='Whether this document should be single page only')),
                ('max_pages', models.IntegerField(default=2, help_text='Maximum number of pages allowed (for PDFs)')),
            ],
            options={
                'db_table': 'document_types',
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='UserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.URLField(help_text='Document file URL (Cloudinary or local)', max_length=500)),
                ('file_name', models.CharField(help_text='Original file name', max_length=255)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(help_text='File MIME type', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('needs_resubmission', 'Needs Resubmission')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True, help_text='Admin review notes', null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_visible_to_admin', models.BooleanField(default=False, help_text='Whether admin can see this document')),
                ('cloudinary_public_id', models.CharField(blank=True, help_text='Cloudinary public ID for the file', max_length=255, null=True)),
                ('local_file_path', models.CharField(blank=True, help_text='Local file path for PDFs to avoid Cloudinary access issues', max_length=500, null=True)),
                ('converted_images', models.JSONField(blank=True, help_text='Metadata for converted images (for PDFs converted to images)', null=True)),
                ('is_pdf_converted', models.BooleanField(default=False, help_text='Whether this document was converted from PDF to images')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.documenttype')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='JWTToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_hash', models.CharField(help_text='SHA-256 hash of the token', max_length=64, unique=True)),
                ('token_type', models.CharField(choices=[('access', 'Access Token'), ('refresh', 'Refresh Token')], max_length=10)),
                ('jti', models.CharField(help_text='JWT ID from token payload', max_length=255, unique=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_revoked', models.BooleanField(default=False)),
                ('is_blacklisted', models.BooleanField(default=False)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('blacklisted_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('device_info', models.CharField(blank=True, max_length=255, null=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jwt_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'jwt_tokens',
                'ordering': ['-issued_at'],
                'indexes': [models.Index(fields=['user', 'token_type'], name='jwt_tokens_user_id_636378_idx'), models.Index(fields=['token_hash'], name='jwt_tokens_token_h_f75a1b_idx'), models.Index(fields=['jti'], name='jwt_tokens_jti_5d9bd1_idx'), models.Index(fields=['expires_at'], name='jwt_tokens_expires_b82c5c_idx'), models.Index(fields=['is_revoked', 'is_blacklisted'], name='jwt_tokens_is_revo_82f4b5_idx')],
            },
        ),
    ]
