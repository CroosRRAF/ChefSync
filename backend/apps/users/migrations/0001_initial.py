# Generated by Django 5.2.5 on 2025-09-27 09:22

import apps.food.cloudinary_fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address_type",
                    models.CharField(
                        choices=[
                            ("customer", "Customer Address"),
                            ("kitchen", "Kitchen Location"),
                            ("delivery_agent", "Delivery Agent Location"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Address label (e.g., Home, Work, Kitchen, Current Location)",
                        max_length=100,
                    ),
                ),
                (
                    "address_line1",
                    models.CharField(
                        help_text="Street address, building name, etc.", max_length=200
                    ),
                ),
                (
                    "address_line2",
                    models.CharField(
                        blank=True,
                        help_text="Apartment, floor, etc.",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "landmark",
                    models.CharField(
                        blank=True,
                        help_text="Nearby landmark",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(default="India", max_length=100)),
                (
                    "pincode",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Pincode must be 6 digits", regex="^\\d{6}$"
                            )
                        ],
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Default address for this user and type",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_addresses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "addresses",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile_picture",
                    apps.food.cloudinary_fields.CloudinaryImageField(
                        blank=True, max_length=500, null=True
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("prefer_not_to_say", "Prefer not to say"),
                        ],
                        max_length=20,
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                ("preferences", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_profiles",
            },
        ),
        migrations.CreateModel(
            name="KitchenLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "kitchen_name",
                    models.CharField(
                        help_text="Name of the kitchen/restaurant", max_length=200
                    ),
                ),
                (
                    "kitchen_type",
                    models.CharField(
                        choices=[
                            ("home", "Home Kitchen"),
                            ("commercial", "Commercial Kitchen"),
                            ("restaurant", "Restaurant"),
                            ("cloud_kitchen", "Cloud Kitchen"),
                        ],
                        default="home",
                        max_length=50,
                    ),
                ),
                (
                    "contact_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter valid mobile number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "alternate_contact",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter valid mobile number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "operating_hours",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Operating hours for each day",
                    ),
                ),
                (
                    "max_orders_per_day",
                    models.PositiveIntegerField(
                        default=50,
                        help_text="Maximum orders this kitchen can handle per day",
                    ),
                ),
                (
                    "delivery_radius_km",
                    models.PositiveIntegerField(
                        default=10, help_text="Maximum delivery radius in kilometers"
                    ),
                ),
                ("has_parking", models.BooleanField(default=False)),
                (
                    "pickup_instructions",
                    models.TextField(
                        blank=True, help_text="Instructions for pickup from kitchen"
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("verification_notes", models.TextField(blank=True)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "address",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kitchen_details",
                        to="users.address",
                    ),
                ),
            ],
            options={
                "db_table": "kitchen_locations",
            },
        ),
        migrations.CreateModel(
            name="DeliveryProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vehicle_type", models.CharField(blank=True, max_length=50)),
                ("license_number", models.CharField(blank=True, max_length=100)),
                ("is_available", models.BooleanField(default=True)),
                (
                    "rating_average",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_deliveries", models.PositiveIntegerField(default=0)),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("suspended", "Suspended"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "delivery_profiles",
            },
        ),
        migrations.CreateModel(
            name="DeliveryAgentLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("current", "Current Location"),
                            ("base", "Base Location"),
                            ("service_area", "Service Area"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "contact_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter valid mobile number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter valid mobile number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "service_radius_km",
                    models.PositiveIntegerField(
                        default=15, help_text="Service radius in kilometers"
                    ),
                ),
                ("is_available_for_service", models.BooleanField(default=True)),
                ("last_updated_location", models.DateTimeField(blank=True, null=True)),
                (
                    "location_accuracy_meters",
                    models.PositiveIntegerField(
                        blank=True, help_text="GPS accuracy in meters", null=True
                    ),
                ),
                (
                    "address",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_agent_details",
                        to="users.address",
                    ),
                ),
            ],
            options={
                "db_table": "delivery_agent_locations",
            },
        ),
        migrations.CreateModel(
            name='DeliveryProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(blank=True, max_length=50)),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('is_available', models.BooleanField(default=True)),
                ('rating_average', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_deliveries', models.PositiveIntegerField(default=0)),
                ('approval_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'delivery_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', apps.food.cloudinary_fields.CloudinaryImageField(blank=True, max_length=500, null=True)),
                ('address', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20)),
                ('bio', models.TextField(blank=True)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
    ]
