"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-3oo5lepmhh(qlf-m^s+ftjk=g0r7)h-jb$2vzu%1g7&jq0a32o",
)
# Optional: allow using a separate JWT signing key; falls back to SECRET_KEY if not provided
JWT_SIGNING_KEY = config("JWT_SECRET_KEY", default=SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

# Robust ALLOWED_HOSTS parsing from env (comma-separated)
_ALLOWED_HOSTS_RAW = config("ALLOWED_HOSTS", default="localhost,127.0.0.1,testserver")
if isinstance(_ALLOWED_HOSTS_RAW, str):
    ALLOWED_HOSTS = [h.strip() for h in _ALLOWED_HOSTS_RAW.split(",") if h.strip()]
elif isinstance(_ALLOWED_HOSTS_RAW, (list, tuple)):
    ALLOWED_HOSTS = list(_ALLOWED_HOSTS_RAW)
else:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1", "testserver"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # Third party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "cloudinary_storage",
    "cloudinary",
    # Local apps
    "apps.authentication",
    "apps.analytics",
    "apps.admin_panel",  # Re-enabled after fixing database
    "apps.admin_management",
    "apps.communications",
    "apps.food",
    "apps.orders",
    "apps.payments",
    "apps.users",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "config.middleware.SecurityHeadersMiddleware",  # Custom security headers for OAuth
    "config.middleware.DisableCSRFMiddleware",  # Custom CSRF exemption for development
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - MySQL (reverted)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config("DB_NAME", default="chefsync_db"),
        "USER": config("DB_USER", default="root"),
        "PASSWORD": config("DB_PASSWORD", default=""),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default="3306"),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "authentication.User"

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),  # Extended to 1 hour
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": JWT_SIGNING_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "user_id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:8081",
    "http://127.0.0.1:8081",
    "http://localhost:8082",
    "http://127.0.0.1:8082",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://0.0.0.0:8080",
    "http://0.0.0.0:8081",
    "http://0.0.0.0:8082",
    # HTTPS origins for development (if frontend served over HTTPS)
    "https://localhost:5173",
    "https://127.0.0.1:5173",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
    "https://localhost:8080",
    "https://127.0.0.1:8080",
    "https://localhost:8081",
    "https://127.0.0.1:8081",
]
CORS_ALLOW_CREDENTIALS = True
# Do not use wildcard origins when credentials are enabled. List explicit origins instead.
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# CSRF settings - Allow cross-origin requests from frontend
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:8081",
    "http://127.0.0.1:8081",
    "http://localhost:8082",
    "http://127.0.0.1:8082",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    # HTTPS origins for development
    "https://localhost:5173",
    "https://127.0.0.1:5173",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
    "https://localhost:8080",
    "https://127.0.0.1:8080",
    "https://localhost:8081",
    "https://127.0.0.1:8081",
]
# CSRF Cookie settings for cross-origin development
if DEBUG:
    # For development with different origins (localhost:8081 and 127.0.0.1:8000)
    CSRF_COOKIE_SAMESITE = None
    CSRF_COOKIE_SECURE = (
        False  # Can be False in development with SameSite=None over HTTP
    )
else:
    # Production settings
    CSRF_COOKIE_SAMESITE = "Strict"
    CSRF_COOKIE_SECURE = True

CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF cookie
CSRF_USE_SESSIONS = False

# Session Cookie settings to match CSRF settings
if DEBUG:
    # For development with different origins
    SESSION_COOKIE_SAMESITE = None
    SESSION_COOKIE_SECURE = False
else:
    # Production settings
    SESSION_COOKIE_SAMESITE = "Strict"
    SESSION_COOKIE_SECURE = True

# Disable CSRF for API endpoints in development
CSRF_EXEMPT_URLS = (
    [
        r"^/api/auth/.*$",
        r"^/api/.*$",
    ]
    if DEBUG
    else []
)

# Additional CSRF settings for development
if DEBUG:
    CSRF_TRUSTED_ORIGINS.extend(
        [
            "http://localhost:8081",
            "http://127.0.0.1:8081",
            "http://localhost:8080",
            "http://127.0.0.1:8080",
        ]
    )

# Additional CORS settings for development
CORS_EXPOSE_HEADERS = ["*"]
CORS_PREFLIGHT_MAX_AGE = 86400

# Additional CORS settings to ensure compatibility
CORS_ALLOW_PRIVATE_NETWORK = True

# In development, be more permissive with CORS
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = False  # Keep this False for security
    # But add specific origins
    CORS_ALLOWED_ORIGINS.extend(
        [
            "http://localhost:8081",
            "http://127.0.0.1:8081",
            "http://localhost:8080",
            "http://127.0.0.1:8080",
        ]
    )

    # More permissive headers for development
    CORS_ALLOW_HEADERS.extend(
        [
            "x-csrftoken",
            "x-requested-with",
            "accept",
            "accept-encoding",
            "authorization",
            "content-type",
            "dnt",
            "origin",
            "user-agent",
        ]
    )

# Site ID for allauth
SITE_ID = 1

# Allauth Configuration
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Allauth Settings
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[ChefSync] "
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"  # Changed from https for development
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_SESSION_REMEMBER = True

# Rate limiting for login attempts (replaces deprecated ACCOUNT_LOGIN_ATTEMPTS_LIMIT/TIMEOUT)
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/5m",  # 5 attempts per 5 minutes
}

# Email Configuration (using Brevo SMTP)
EMAIL_BACKEND = config(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"  # Changed to console for development
)
EMAIL_HOST = config("EMAIL_HOST", default="smtp-relay.brevo.com")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", default=False, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="noreply@chefsync.com")

# Frontend URL for email verification
FRONTEND_URL = config("FRONTEND_URL", default="http://localhost:8081")

# Google OAuth Configuration
GOOGLE_OAUTH_CLIENT_ID = config("GOOGLE_OAUTH_CLIENT_ID", default="")
GOOGLE_OAUTH_CLIENT_SECRET = config("GOOGLE_OAUTH_CLIENT_SECRET", default="")

# Google Gemini / Generative AI API Key
# Used by apps.admin_management.services.ai_service.AdminAIService
GOOGLE_AI_API_KEY = config("GOOGLE_AI_API_KEY", default="")

# Google OAuth Settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,
    }
}

SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=31536000, cast=int)
SECURE_HSTS_INCLUDE_SUBDOMAINS = config(
    "SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True, cast=bool
)
SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default=True, cast=bool)
SECURE_SSL_REDIRECT = config(
    "SECURE_SSL_REDIRECT", default=False, cast=bool
)  # Set to True in production with HTTPS
SECURE_PROXY_SSL_HEADER = (
    "HTTP_X_FORWARDED_PROTO",
    "https",
)  # For reverse proxy setups

# OTP Configuration
OTP_EXPIRY_MINUTES = config(
    "OTP_EXPIRY_MINUTES", default=30, cast=int
)  # Extended to 30 minutes
OTP_LENGTH = config("OTP_LENGTH", default=6, cast=int)
EMAIL_VERIFICATION_REQUIRED = config(
    "EMAIL_VERIFICATION_REQUIRED", default=True, cast=bool
)

# Cross-Origin Policies (to support OAuth popups in dev)
# Default to a safe value, but relax further in DEBUG below
SECURE_CROSS_ORIGIN_OPENER_POLICY = config(
    "SECURE_CROSS_ORIGIN_OPENER_POLICY", default="same-origin-allow-popups"
)
# Leave COEP disabled unless you specifically need cross-origin isolation
# (Setting to None means Django won't set the header)
try:
    _coep_raw = config("SECURE_CROSS_ORIGIN_EMBEDDER_POLICY", default="")
    _coep_str = str(_coep_raw).strip()
    SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = None if _coep_str == "" else _coep_str
except Exception:
    SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = None

# In development, disable COOP to avoid postMessage/window.closed warnings with Google OAuth
if DEBUG:
    SECURE_CROSS_ORIGIN_OPENER_POLICY = None
    SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = None
    # Also relax X-Frame-Options for development
    X_FRAME_OPTIONS = "SAMEORIGIN"  # Changed from DENY for OAuth

    # Disable some security headers that interfere with development
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SECURE_BROWSER_XSS_FILTER = False

# Cloudinary Configuration
CLOUDINARY_STORAGE = {
    "CLOUD_NAME": config("CLOUDINARY_CLOUD_NAME", default="durdb7hxw"),
    "API_KEY": config("CLOUDINARY_API_KEY", default="647168559376263"),
    "API_SECRET": config(
        "CLOUDINARY_API_SECRET", default="6SRLFCnJzUmcxEkYBs28njXmyhM"
    ),
    "SECURE": True,
}

# Poppler Configuration for PDF processing
POPPLER_PATH = r"C:\poppler\poppler-23.08.0\Library\bin"

# File Storage Configuration - Using Cloudinary
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
STATICFILES_STORAGE = "cloudinary_storage.storage.StaticCloudinaryStorage"

# Fallback local storage settings
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Local file storage fallback for Cloudinary issues
USE_LOCAL_STORAGE = config("USE_LOCAL_STORAGE", default=False, cast=bool)
LOCAL_MEDIA_ROOT = BASE_DIR / "local_media"

# Admin Feature Flags
ADMIN_FEATURES_V2 = config("ADMIN_FEATURES_V2", default=True, cast=bool)
ADMIN_NOTIFICATIONS_V2 = config("ADMIN_NOTIFICATIONS_V2", default=True, cast=bool)
ADMIN_ORDERS_TIMELINE = config("ADMIN_ORDERS_TIMELINE", default=True, cast=bool)
ADMIN_COMMS_SENTIMENT = config("ADMIN_COMMS_SENTIMENT", default=True, cast=bool)
ADMIN_MAPS_V1 = config("ADMIN_MAPS_V1", default=False, cast=bool)
ADMIN_EXPORTS_AI_REPORTS = config("ADMIN_EXPORTS_AI_REPORTS", default=False, cast=bool)

# Silence system check warnings
SILENCED_SYSTEM_CHECKS = [
    "models.W036",  # MySQL does not support unique constraints with conditions
]

# Content Security Policy Settings (Google OAuth Enabled)
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",
    "'unsafe-eval'",
    "https://accounts.google.com",
    "https://apis.google.com",
)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://fonts.googleapis.com")
CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")
CSP_IMG_SRC = ("'self'", "data:", "https:", "http:")
CSP_CONNECT_SRC = ("'self'", "https://accounts.google.com", "https://apis.google.com")
CSP_FRAME_SRC = ("'self'", "https://accounts.google.com")
CSP_OBJECT_SRC = ("'none'",)
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'", "https://accounts.google.com")

# Security Headers
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"

# Feature Policy
FEATURE_POLICY = {
    "camera": [],
    "microphone": [],
    "geolocation": [],
    "payment": [],
    "usb": [],
    "magnetometer": [],
    "gyroscope": [],
    "accelerometer": [],
    "ambient-light-sensor": [],
    "autoplay": [],
    "battery": [],
    "bluetooth": [],
    "display-capture": [],
    "document-domain": [],
    "encrypted-media": [],
    "fullscreen": [],
    "identity-credentials-get": [],
    "midi": [],
    "notifications": [],
    "picture-in-picture": [],
    "publickey-credentials-get": [],
    "screen-wake-lock": [],
    "sync-xhr": [],
    "web-share": [],
    "xr-spatial-tracking": [],
}
